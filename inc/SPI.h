#pragma once
#include "FilConfig.h"
#if(FIL_SPI == 1)

//-----------------------Simple commands reset and set the state--------------------------------------- //


//----------------------------------------Set state----------------------------------------------------//
#define SetSPIBidiMode(SPI)     ((SPI->CR1) |= SPI_CR1_BIDIMODE)
#define SetSPIBidiOE(SPI)       ((SPI->CR1) |= SPI_CR1_BIDIOE)
#define SetSPICRCEN(SPI)        ((SPI->CR1) |= SPI_CR1_CRCEN)
#define SetSPICRCNext(SPI)      ((SPI->CR1) |= SPI_CR1_CRCNEXT)
#define SetSPIDFF(SPI)          ((SPI->CR1) |= SPI_CR1_DFF)
#define SetSPIRXOnly(SPI)       ((SPI->CR1) |= SPI_CR1_RXONLY)
#define SetSPISSM(SPI)          ((SPI->CR1) |= SPI_CR1_SSM)
#define SetSPISSI(SPI)          ((SPI->CR1) |= SPI_CR1_SSI)
#define SetSPILSBFirst(SPI)     ((SPI->CR1) |= SPI_CR1_LSBFIRST)
#define SPIStart(SPI)           ((SPI->CR1) |= SPI_CR1_SPE)
#define SetSPIBR(SPI,BAUD)      ((SPI->CR1) |= (BAUD << 3))
#define SetSPIMaster(SPI)       ((SPI->CR1) |= SPI_CR1_MSTR)
#define SetSPICPOL(SPI)         ((SPI->CR1) |= SPI_CR1_CPOL)
#define SetSPICPHA(SPI)         ((SPI->CR1) |= SPI_CR1_CPHA)
#define SetSPITXEIE(SPI)            ((SPI->CR2) |= SPI_CR2_TXEIE)
#define SetSPIRXNEIE(SPI)           ((SPI->CR2) |= SPI_CR2_RXNEIE)
#define SetSPIErrorInterrupt(SPI)   ((SPI->CR2) |= SPI_CR2_ERRIE)
#define SetSPISSOE(SPI)             ((SPI->CR2) |= SPI_CR2_SSOE)
#define SetSPIDMATX(SPI)            ((SPI->CR2) |= SPI_CR2_TXDMAEN)
#define SetSPIDMARX(SPI)            ((SPI->CR2) |= SPI_CR2_RXDMAEN)
#define SetSPIPolynomial(SPI,POLINOM)   ((SPI->CRCPR) |= POLYNOM)
#define SetSPIDR(SPI,DATA)              ((SPI->DR) = DATA)
//---------------------------------------Reset state--------------------------------------------------//
#define ResetSPIBidiMode(SPI)         ((SPI->CR1) &= (~SPI_CR1_BIDIMODE))
#define ResetSPIBidiOE(SPI)           ((SPI->CR1) &= (~SPI_CR1_BIDIOE))
#define ResetSPICRCEN(SPI)            ((SPI->CR1) &= (~SPI_CR1_CRCEN))
#define ResetSPICRCNext(SPI)          ((SPI->CR1) &= (~SPI_CR1_CRCNEXT))
#define ResetSPIDFF(SPI)              ((SPI->CR1) &= (~SPI_CR1_DFF))
#define ResetSPIRXOnly(SPI)           ((SPI->CR1) &= (~SPI_CR1_RXONLY))
#define ResetSPISSM(SPI)              ((SPI->CR1) &= (~SPI_CR1_SSM))
#define ResetSPISSI(SPI)              ((SPI->CR1) &= (~SPI_CR1_SSI))
#define ResetSPILSBFirst(SPI)         ((SPI->CR1) &= (~SPI_CR1_LSBFIRST))
#define SPIStop(SPI)                  ((SPI->CR1) &= (~SPI_CR1_SPE))
#define ResetSPIBR(SPI,BAUD)          ((SPI->CR1) &= (~SPI_CR1_BR))
#define ResetSPIMaster(SPI)           ((SPI->CR1) &= (~SPI_CR1_MSTR))
#define ResetSPICPOL(SPI)             ((SPI->CR1) &= (~SPI_CR1_CPOL))
#define ResetSPICPHA(SPI)             ((SPI->CR1) &= (~SPI_CR1_CPHA))
#define ResetSPITXEIE(SPI)            ((SPI->CR2) &= (~SPI_CR2_TXEIE))
#define ResetSPIRXNEIE(SPI)           ((SPI->CR2) &= (~SPI_CR2_RXNEIE))
#define ResetSPIErrorInterrupt(SPI)   ((SPI->CR2) &= (~SPI_CR2_ERRIE))
#define ResetSPISSOE(SPI)             ((SPI->CR2) &= (~SPI_CR2_SSOE))
#define ResetSPIDMATX(SPI)            ((SPI->CR2) &= (~SPI_CR2_TXDMAEN))
#define ResetSPIDMARX(SPI)            ((SPI->CR2) &= (~SPI_CR2_RXDMAEN))
#define ResetSPIPolynomial(SPI,POLINOM)   ((SPI->CRCPR) &= (~SPI_CRCPR_CRCPOLY))
#define ResetSPIDR(SPI,DATA)              ((SPI->DR) = (~SPI_DR_DR))
//---------------------------------------Status flags-------------------------------------------------//
#define CheckSPIFrameErrorEvent(SPI)    (((SPI->SR & SPI_SR_FRE) >> 8) == 0x1)
#define CheckSPIBusyEvent(SPI)          (((SPI->SR & SPI_SR_BSY) >> 7) == 0x1)
#define CheckSPIOverrunEvent(SPI)       (((SPI->SR & SPI_SR_OVR) >> 6) == 0x1)
#define CheckSPIModeFaultEvent(SPI)     (((SPI->SR & SPI_SR_MODF) >> 5) == 0x1)
#define CheckSPICRCErrorEvent(SPI)      (((SPI->SR & SPI_SR_CRCERR) >> 4) == 0x1)
#define CheckSPIUnderrunEvent(SPI)      (((SPI->SR & SPI_SR_UDR) >> 3) == 0x1)
#define CheckSPIChannelSideEvent(SPI)   (((SPI->SR & SPI_SR_CHSIDE) >> 2) == 0x1)
#define CheckSPITXEmptyEvent(SPI)       (((SPI->SR & SPI_SR_TXE) >> 1) == 0x1)
#define CheckSPIRXNotEmptyEvent(SPI)    ((SPI->SR & SPI_SR_RXNE) == 0x1)

#endif /*FIL_SPI*/
